# -*- coding: utf-8 -*-
"""Karplus_strong_software_implementation_instructions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X2ZRKrbI1GbKXGrnsTZEyOzbc4vdn2F2

Music synthesiser using Karplus Strong algorithm

This notebook contains instructions for implementation of Karplus Strong algorithm in python
"""

#Important parameters
#Varying these parameters will produce different kinds of sound
#Change these parameters and observe how final sound changes

#Number of samples to be fed in output in every iteration
L = 25

#Total number of samples in the final audio
N = 10000

#Frequency of the final audio
fs = 10000

#Volume control of audio
volume = 2000

#Parameters for the initial condition of output line
#Initial condition of output line is white gaussian noise in this program
#You can try different kinds of noise
mean = 0
sd = 1   #Standard deviation

#Importing essential libraries
import numpy as np
from scipy.io import wavfile

#Function to generate white noise for initial conditions of output line
def white_noise_generator(mean, sd):
  """
  Arguments
  mean - mean of the white noise distribution
  sd - standard deviation of white noise distribution
  
  Returns
  numpy array of size L with mean and standard deviation as specified by arguments
  """
  #Write code here

#A low pass filter
def filter_lp(signal):
  """
  Arguments
  signal - numpy array of size L

  Returns
  numpy array of size L

  Example
  If signal is [0, 1, 2, 3]
  then function should return ([0, 1, 2, 3] + [3, 0, 1, 2])/2 = [1.5, 0.5, 1.5, 2.5]
  """
  #Write code here

#Main part of code

#Initialize output numpy array with white noise
#Write code

#Till output array does not have N samples append output of filter to output array
#Write code

#Set the volume of sound
#Write code

#Write output array to wavfile
#Write code